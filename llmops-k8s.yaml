# -----------------------------
# 1) Deployment: Run app + expose port 8501 (HTTP) and 8000 (Metrics)
# -----------------------------
apiVersion: apps/v1
kind: Deployment

metadata:
  namespace: anime-recommender
  name: anime-recommender-deployment
  labels:
    app: anime-recommender-deployment

spec:
  replicas: 3
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      # The same as template.metadata.labels
      app: anime-recommender-deployment
  template:
    metadata:
      labels:
        # The same as spec.selector.matchLabels
        app: anime-recommender-deployment
    spec:
      containers:
        - name: anime-recommender-container
          image: biabeogo147/anime-recommender-app:v1.0.1
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: anime-recommender-secrets
          env:
            # config.config.METRICS_PORT
            - name: METRICS_PORT
              value: "8000"
          ports:
            - name: http
              containerPort: 8501
            - name: metrics
              containerPort: 8000

          # Check if app is ready to serve traffic
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 3

          # Health check to ensure app is alive
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 20
            periodSeconds: 20
            timeoutSeconds: 2
            failureThreshold: 3

          # Resource requests and limits
          resources:
            requests:
              cpu: "100m"
              memory: "256Mi"
            limits:
              cpu: "700m"
              memory: "2Gi"

---
# -----------------------------
# 2) Service public for web (LoadBalancer 80 -> 8501)
# -----------------------------
apiVersion: v1
kind: Service

metadata:
  namespace: anime-recommender
  name: anime-recommender-service
  labels:
    app: anime-recommender-service

spec:
  type: ClusterIP
  selector:
    app: anime-recommender-deployment
  ports:
    - name: web        # Port outside the cluster
      protocol: TCP
      port: 80
      targetPort: http # Target containerPort in Deployment

---
# -----------------------------
# 3) Service private for metrics
#    Prometheus will scrape through this service.
# -----------------------------
apiVersion: v1
kind: Service

metadata:
  namespace: anime-recommender
  name: anime-recommender-metrics
  labels:
    app: anime-recommender-metrics

spec:
  type: ClusterIP # Only accessible within the cluster, not exposed outside Internet
  selector:
    app: anime-recommender-deployment
  ports:
    - name: metrics-outside # Port outside the cluster
      protocol: TCP
      port: 8000
      targetPort: metrics   # Target containerPort in Deployment

---
# -----------------------------
# 4) ServiceMonitor (Prometheus Operator) - CRD (Custom Resource Definition)
#    Allow Prometheus scrape /metrics from anime-recommender-metrics service.
#    Requires kube-prometheus-stack installed in the cluster.
# App metrics
# -----------------------------
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor

metadata:
  namespace: monitoring
  name: anime-recommender-servicemonitor
  labels:
    # Must be in the same namespace as kube-prometheus-stack
    release: monitoring

spec:
  # App Namespace
  namespaceSelector:
    matchNames:
      - anime-recommender
  selector:
    matchLabels:
      app: anime-recommender-metrics
  endpoints:
    - port: metrics-outside  # Port defined in anime-recommender-metrics Service
      path: /metrics
      interval: 15s
      scrapeTimeout: 10s

---
# -----------------------------
# 5) Ingress rule for Grafana
# -----------------------------
apiVersion: networking.k8s.io/v1
kind: Ingress

metadata:
  name: grafana-ingress
  namespace: monitoring
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /

spec:
  ingressClassName: nginx
  rules:
    - host: grafana.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: monitoring-grafana
                port:
                  number: 80

---
# -----------------------------
# 6) Ingress rule for anime-recommender-app
# -----------------------------
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: streamlit-ingress
  namespace: anime-recommender
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:
    - host: streamlit.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: anime-recommender-service
                port:
                  number: 80

---
# -----------------------------
# 7) Ingress rule for Prometheus
# -----------------------------
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prometheus-ingress
  namespace: monitoring
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:
    - host: prometheus.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: monitoring-kube-prometheus-prometheus
                port:
                  number: 9090